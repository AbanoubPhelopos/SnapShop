@using SnapShop.Utility; 
<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
@model List<SnapShop.Application.ViewModel.UserVM>
@{
    ViewData["Title"] = "Home";
}

<div class="d-flex position-relative">
    <div class="d-flex justify-content-center mb-3 position-relative">
        <input class="txtSearch form-control form-control-sm w-auto ps-5" type="text" name="txtSearch" placeholder="Email" />
        <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ps-2" style="font-size: 1rem; color: #6c757d;"></i>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-bordered table-hover">
        <thead>
        <tr>
            <th>#</th>
            <th>Email</th>
            <th>Role</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody id="protbody">
        @{
        int sl = 1;
        foreach (var item in Model)
        {
        <tr>
            <td>@sl</td>
            <td>@item.Email</td>
            <td>@item.Role</td>
            <td>
                <!-- Lock/Unlock button -->
                <a id="lockUnlockBtn-@item.Id"
                   onclick="toggleLockManager('@item.Id', @item.IsLocked.ToString().ToLower())"
                   class="btn @(item.IsLocked ? "btn-outline-danger" : "btn-outline-success") btn-sm"
                   style="cursor: pointer;">
                    @(item.IsLocked ? "Unlock" : "Lock")
                    <i class="bi @(item.IsLocked ? "bi-unlock" : "bi-lock")"></i>
                </a>

                <!-- Delete button -->
                <a onclick="RemoveManager('@item.Id')"
                   class="btn btn-outline-danger btn-sm ms-2"
                   style="cursor: pointer;">
                    Delete <i class="bi bi-trash"></i>
                </a>

                <!-- Edit button -->
                <a onclick="EditManager('@item.Id')"
                   class="btn btn-outline-secondary btn-sm"
                   style="cursor: pointer;">
                    Edit <i class="bi bi-pencil-square"></i>
                </a>
            </td>
        </tr>
        sl++;
        }
        }
        </tbody>
    </table>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editProModal" tabindex="-1" aria-labelledby="editProModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProModalLabel">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mx-3">
                    <input type="hidden" id="userId"/>
                        <div class="row mb-2">
                            <label for="ddlRole" class="col-sm-3 col-form-label">Role</label>
                            <div class="col-sm-9">
                                <select id="ddlRole" name="role" class="form-select form-select-sm" required>
                                    <option value=Cashier>Cashier</option>
                                    <option value=Managar>Managar</option>
                                    <option value=Storekeeper>Storekeeper</option>
                                </select>
                                <div class="invalid-feedback">This Role field is required.</div>
                            </div>
                        </div>
                        <div class="modal-footer">
                        <button type="submit" class="btn btn-sm btn-outline-primary" onclick="UpdateManager()">Save</button>
                        </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        $('.txtSearch').on('input', function () {
            let searchValue = $(this).val().toLowerCase();

            // Iterate through each row in the table
            $('#protbody tr').each(function () {
                let email = $(this).find('td:nth-child(2)').text().toLowerCase().trim();

                // Check if the search value matches the email
                if (email.includes(searchValue)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });
     // Function to show alerts
     function showAlert(icon, title) {
         Swal.fire({
             position: "top-end",
             icon: icon,
             title: title,
             showConfirmButton: false,
             timer: 1500
         });
     }

        // Toggle Lock/Unlock User Function
        window.toggleLockManager = function (userId, isLocked) {
            $.ajax({
                type: "POST",
                url: "/Manager/ToggleLockUser",
                data: { userId: userId },
                success: function (response) {
                    if (response.success) {
                        // Get the button element
                        const button = $(`#lockUnlockBtn-${userId}`);
                        const newIsLocked = response.isLocked;  // Use the response to determine the new state

                        // Update the button text, icon, and class based on the lock state
                        if (newIsLocked) {
                            button.html('Unlock <i class="bi bi-unlock"></i>');
                            button.removeClass('btn-outline-success').addClass('btn-outline-danger');  // Change color to indicate locked state
                            button.attr('onclick', `toggleLockManager('${userId}', true)`);
                        } else {
                            button.html('Lock <i class="bi bi-lock"></i>');
                            button.removeClass('btn-outline-danger').addClass('btn-outline-success');  // Change color to indicate unlocked state
                            button.attr('onclick', `toggleLockManager('${userId}', false)`);
                        }

                        // Show success alert
                        showAlert('success', response.message);
                    } else {
                        showAlert('error', response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error:", error);
                    showAlert('error', 'An error occurred while toggling the lock status.');
                }
            });
        };

     // Remove User Function
     window.RemoveManager = function (userId) {
         $.ajax({
             type: "POST",
             url: "/Manager/RemoveEmployee",
             data: { userId: userId },
             success: function (response) {
                 showAlert(response.success ? "success" : "error", response.message);
                 if (response.success) {
                     // Optionally remove the row from the table
                     $(`#protbody tr:has(td:contains(${userId}))`).remove();
                     // Auto-refresh the page
                     location.reload();
                 }
             },
             error: function (xhr, status, error) {
                 handleAjaxError(xhr, status, error);
             }
         });
     };
        function EditManager(userId) {
            $.ajax({
                type: "GET",
                url: "/Manager/Edit?id=" + userId,
                dataType: "json",
                success: function (response) {
                    // Set the user ID and role for editing
                    $('#userId').val(userId)
                    $('#ddlRole').val(response.role); // Set the selected role
                    // Show the modal
                    $('#editProModal').modal('show');
                },
                error: function (xhr, status, error) {
                    console.error("Error:", error);
                }
            });
        };

        // Function to Update User
        function UpdateManager() {
            const userId = $('#userId').val(); // Get user ID from the modal
            const role = $('#ddlRole').val(); // Get selected role from the dropdown

            const data = {
                Id: userId,
                Role: role
            };

            $.ajax({
                type: "POST",
                url: "/Manager/Update", 
                data: data, 
                success: function (response) {
                    showAlert(response.success ? "success" : "error", response.message);
                    if (response.success) {
                        let row = $(`#protbody tr:has(td:contains(${userId}))`);
                        row.find('td:nth-child(3)').text(role); 
                        $('#editProModal').modal('hide'); 
                    }
                },
                error: function (xhr, status, error) {
                    handleAjaxError(xhr, status, error);
                }
            });
        };

        // Handle AJAX errors
        function handleAjaxError(xhr, status, error) {
            console.error("Error:", error);
            showAlert("error", "An error occurred while processing your request.");
        }
  </script>
}